{
  "sksl": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform vec2 resolution;\nuniform float time;\n\nvec4 fragColor;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nfloat FLT_flutter_local_rayTorus(vec3 ro, vec3 rd, vec2 tor)\n{\n    float po = 1.0;\n    float Ra2 = tor.x * tor.x;\n    float ra2 = tor.y * tor.y;\n    float m = dot(ro, ro);\n    float n = dot(ro, rd);\n    float h = ((n * n) - m) + ((tor.x + tor.y) * (tor.x + tor.y));\n    if (h < 0.0)\n    {\n        return -1.0;\n    }\n    float k = ((m - ra2) - Ra2) / 2.0;\n    float k3 = n;\n    float k2 = ((n * n) + ((Ra2 * rd.z) * rd.z)) + k;\n    float k1 = (k * n) + ((Ra2 * ro.z) * rd.z);\n    float k0 = ((k * k) + ((Ra2 * ro.z) * ro.z)) - (Ra2 * ra2);\n    if (abs((k3 * ((k3 * k3) - k2)) + k1) < 0.00999999977648258209228515625)\n    {\n        po = -1.0;\n        float tmp = k1;\n        k1 = k3;\n        k3 = tmp;\n        k0 = 1.0 / k0;\n        k1 *= k0;\n        k2 *= k0;\n        k3 *= k0;\n    }\n    float c2 = (2.0 * k2) - ((3.0 * k3) * k3);\n    float c1 = (k3 * ((k3 * k3) - k2)) + k1;\n    float c0 = (k3 * ((k3 * ((((-3.0) * k3) * k3) + (4.0 * k2))) - (8.0 * k1))) + (4.0 * k0);\n    c2 /= 3.0;\n    c1 *= 2.0;\n    c0 /= 3.0;\n    float Q = (c2 * c2) + c0;\n    float R = (((3.0 * c0) * c2) - ((c2 * c2) * c2)) - (c1 * c1);\n    float h_1 = (R * R) - ((Q * Q) * Q);\n    float z = 0.0;\n    if (h_1 < 0.0)\n    {\n        float sQ = sqrt(Q);\n        z = (2.0 * sQ) * cos(acos(R / (sQ * Q)) / 3.0);\n    }\n    else\n    {\n        float sQ_1 = pow(sqrt(h_1) + abs(R), 0.3333333432674407958984375);\n        z = sign(R) * abs(sQ_1 + (Q / sQ_1));\n    }\n    z = c2 - z;\n    float d1 = z - (3.0 * c2);\n    float d2 = (z * z) - (3.0 * c0);\n    if (abs(d1) < 9.9999997473787516355514526367188e-05)\n    {\n        if (d2 < 0.0)\n        {\n            return -1.0;\n        }\n        d2 = sqrt(d2);\n    }\n    else\n    {\n        if (d1 < 0.0)\n        {\n            return -1.0;\n        }\n        d1 = sqrt(d1 / 2.0);\n        d2 = c1 / d1;\n    }\n    float result = 100000002004087734272.0;\n    h_1 = ((d1 * d1) - z) + d2;\n    if (h_1 > 0.0)\n    {\n        h_1 = sqrt(h_1);\n        float t1 = ((-d1) - h_1) - k3;\n        float _359;\n        if (po < 0.0)\n        {\n            _359 = 2.0 / t1;\n        }\n        else\n        {\n            _359 = t1;\n        }\n        t1 = _359;\n        float t2 = ((-d1) + h_1) - k3;\n        float _376;\n        if (po < 0.0)\n        {\n            _376 = 2.0 / t2;\n        }\n        else\n        {\n            _376 = t2;\n        }\n        t2 = _376;\n        if (t1 > 0.0)\n        {\n            result = t1;\n        }\n        if (t2 > 0.0)\n        {\n            result = min(result, t2);\n        }\n    }\n    h_1 = ((d1 * d1) - z) - d2;\n    if (h_1 > 0.0)\n    {\n        h_1 = sqrt(h_1);\n        float t1_1 = (d1 - h_1) - k3;\n        float _417;\n        if (po < 0.0)\n        {\n            _417 = 2.0 / t1_1;\n        }\n        else\n        {\n            _417 = t1_1;\n        }\n        t1_1 = _417;\n        float t2_1 = (d1 + h_1) - k3;\n        float _433;\n        if (po < 0.0)\n        {\n            _433 = 2.0 / t2_1;\n        }\n        else\n        {\n            _433 = t2_1;\n        }\n        t2_1 = _433;\n        if (t1_1 > 0.0)\n        {\n            result = min(result, t1_1);\n        }\n        if (t2_1 > 0.0)\n        {\n            result = min(result, t2_1);\n        }\n    }\n    return result;\n}\n\nvec3 FLT_flutter_local_torusNormal(vec3 pos, vec2 tor)\n{\n    return normalize(pos * (vec3(dot(pos, pos) - (tor.y * tor.y)) - (vec3(1.0, 1.0, -1.0) * (tor.x * tor.x))));\n}\n\nfloat FLT_flutter_local_tanh_approx(float x)\n{\n    float x2 = x * x;\n    return clamp((x * (27.0 + x2)) / (27.0 + (9.0 * x2)), -1.0, 1.0);\n}\n\nvec3 FLT_flutter_local_color(vec2 p, vec2 q)\n{\n    vec3 ro = vec3(0.0, 0.75, -0.20000000298023223876953125);\n    vec3 la = vec3(0.0, 0.0, 0.20000000298023223876953125);\n    vec3 up = vec3(0.300000011920928955078125, 0.0, 1.0);\n    vec3 lp1 = ro;\n    vec3 _517 = lp1;\n    vec2 _519 = _517.xy * mat2(vec2(0.659983158111572265625, 0.75128042697906494140625), vec2(-0.75128042697906494140625, 0.659983158111572265625));\n    lp1.x = _519.x;\n    lp1.y = _519.y;\n    vec3 _530 = lp1;\n    vec2 _532 = _530.xz * mat2(vec2(0.877582550048828125, -0.47942554950714111328125), vec2(0.47942554950714111328125, 0.877582550048828125));\n    lp1.x = _532.x;\n    lp1.z = _532.y;\n    vec3 ww = normalize(la - ro);\n    vec3 uu = normalize(cross(up, ww));\n    vec3 vv = normalize(cross(ww, uu));\n    vec3 rd = normalize(((uu * p.x) + (vv * p.y)) + (ww * 2.0));\n    vec3 param = ro;\n    vec3 param_1 = rd;\n    vec2 param_2 = vec2(0.550000011920928955078125, 0.4124999940395355224609375);\n    float td = FLT_flutter_local_rayTorus(param, param_1, param_2);\n    vec3 tpos = ro + (rd * td);\n    vec3 param_3 = tpos;\n    vec2 param_4 = vec2(0.550000011920928955078125, 0.4124999940395355224609375);\n    vec3 tnor = -FLT_flutter_local_torusNormal(param_3, param_4);\n    vec3 tref = reflect(rd, tnor);\n    vec3 ldif1 = lp1 - tpos;\n    float ldd1 = dot(ldif1, ldif1);\n    float ldl1 = sqrt(ldd1);\n    vec3 ld1 = ldif1 / vec3(ldl1);\n    vec3 sro = tpos + (tnor * 0.0500000007450580596923828125);\n    vec3 param_5 = sro;\n    vec3 param_6 = ld1;\n    vec2 param_7 = vec2(0.550000011920928955078125, 0.4124999940395355224609375);\n    float sd = FLT_flutter_local_rayTorus(param_5, param_6, param_7);\n    vec3 spos = sro + (ld1 * sd);\n    vec3 param_8 = spos;\n    vec2 param_9 = vec2(0.550000011920928955078125, 0.4124999940395355224609375);\n    vec3 snor = -FLT_flutter_local_torusNormal(param_8, param_9);\n    float dif1 = max(dot(tnor, ld1), 0.0);\n    float spe1 = pow(max(dot(tref, ld1), 0.0), 10.0);\n    float r = length(tpos.xy);\n    float a = atan(tpos.y, tpos.x) - (time / 45.0);\n    float param_10 = 2.0 * abs(td - 0.75);\n    float s = mix(0.0500000007450580596923828125, 0.5, FLT_flutter_local_tanh_approx(param_10));\n    vec3 bcol0 = vec3(0.300000011920928955078125);\n    vec3 bcol1 = vec3(0.02500000037252902984619140625);\n    vec3 tcol = mix(bcol0, bcol1, vec3(smoothstep(-s, s, sin(9.0 * a))));\n    vec3 col = vec3(0.0);\n    if (td > (-1.0))\n    {\n        col += ((tcol * mix(0.20000000298023223876953125, 1.0, dif1 / ldd1)) + vec3(0.25 * spe1));\n        col *= sqrt(abs(dot(rd, tnor)));\n    }\n    if (sd < ldl1)\n    {\n        float param_11 = sd;\n        col *= mix(1.0, 0.0, pow(abs(dot(ld1, snor)), 3.0 * FLT_flutter_local_tanh_approx(param_11)));\n    }\n    return col;\n}\n\nvec3 FLT_flutter_local_postProcess(inout vec3 col, vec2 q)\n{\n    col = clamp(col, vec3(0.0), vec3(1.0));\n    col = pow(col, vec3(0.4545454680919647216796875));\n    col = (col * 0.60000002384185791015625) + (((col * 0.4000000059604644775390625) * col) * (vec3(3.0) - (col * 2.0)));\n    col = mix(col, vec3(dot(col, vec3(0.3300000131130218505859375))), vec3(-0.4000000059604644775390625));\n    col *= (0.5 + (0.5 * pow((((19.0 * q.x) * q.y) * (1.0 - q.x)) * (1.0 - q.y), 0.699999988079071044921875)));\n    return col;\n}\n\nvoid FLT_main()\n{\n    vec2 fragCoord = FLT_flutter_local_FlutterFragCoord();\n    vec2 q_1 = fragCoord / resolution;\n    vec2 p = vec2(-1.0) + (q_1 * 2.0);\n    p.x *= (resolution.x / resolution.y);\n    vec2 param = p;\n    vec2 param_1 = q_1;\n    vec3 col_1 = FLT_flutter_local_color(param, param_1);\n    vec3 param_2 = col_1;\n    vec2 param_3 = q_1;\n    vec3 _820 = FLT_flutter_local_postProcess(param_2, param_3);\n    col_1 = _820;\n    fragColor = vec4(col_1, 1.0);\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
  "stage": 1,
  "target_platform": 2,
  "uniforms": [
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 0,
      "name": "resolution",
      "rows": 2,
      "type": 10
    },
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 1,
      "name": "time",
      "rows": 1,
      "type": 10
    }
  ]
}