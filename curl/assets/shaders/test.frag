{
  "sksl": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform vec2 resolution;\nuniform vec2 mouse;\nuniform shader image;\nuniform half2 image_size;\n\nvec4 fragColor;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nvec2 FLT_flutter_local_calcSphericalCoordsInGnomonicProjection(vec2 screenCoord, vec2 centralPoint, vec2 FoVScale)\n{\n    vec2 cp = ((centralPoint * 2.0) - vec2(1.0)) * vec2(3.1415927410125732421875, 1.57079637050628662109375);\n    vec2 convertedScreenCoord = (((screenCoord * 2.0) - vec2(1.0)) * FoVScale) * vec2(3.1415927410125732421875, 1.57079637050628662109375);\n    float x = convertedScreenCoord.x;\n    float y = convertedScreenCoord.y;\n    float rou = sqrt((x * x) + (y * y));\n    float c = atan(rou);\n    float sin_c = sin(c);\n    float cos_c = cos(c);\n    float lat = asin((cos_c * sin(cp.y)) + (((y * sin_c) * cos(cp.y)) / rou));\n    float lon = cp.x + atan(x * sin_c, ((rou * cos(cp.y)) * cos_c) - ((y * sin(cp.y)) * sin_c));\n    lat = ((lat / 1.57079637050628662109375) + 1.0) * 0.5;\n    lon = ((lon / 3.1415927410125732421875) + 1.0) * 0.5;\n    return vec2(lon, lat) * vec2(6.283185482025146484375, 3.1415927410125732421875);\n}\n\nvec3 FLT_flutter_local_sphericalToCubemap(vec2 sph)\n{\n    return vec3(sin(sph.y) * sin(sph.x), cos(sph.y), sin(sph.y) * cos(sph.x));\n}\n\nvec3 FLT_flutter_local_calcCubeCoordsInGnomonicProjection(vec2 screenCoord, vec2 centralPoint, vec2 FoVScale)\n{\n    vec2 param = screenCoord;\n    vec2 param_1 = centralPoint;\n    vec2 param_2 = FoVScale;\n    vec2 param_3 = FLT_flutter_local_calcSphericalCoordsInGnomonicProjection(param, param_1, param_2);\n    return FLT_flutter_local_sphericalToCubemap(param_3);\n}\n\nvec2 FLT_flutter_local_sphericalToEquirectangular(vec3 dir)\n{\n    float u = 0.5 - (atan(dir.z, dir.x) / 6.283185482025146484375);\n    float v = 0.5 - (asin(dir.y) / 3.1415927410125732421875);\n    return vec2(u, v);\n}\n\nvoid FLT_main()\n{\n    vec2 fragCoord = FLT_flutter_local_FlutterFragCoord();\n    vec2 q = fragCoord / resolution;\n    vec4 iMouse = vec4(mouse.x, mouse.y, 0.0, 0.0);\n    vec2 FoVScale = vec2(0.2249999940395355224609375, 0.20000000298023223876953125);\n    vec2 _227;\n    if (length(iMouse.xy) < 9.9999997473787516355514526367188e-05)\n    {\n        _227 = vec2(0.25, 0.5);\n    }\n    else\n    {\n        _227 = iMouse.xy / resolution;\n    }\n    vec2 centralPoint = _227;\n    vec2 param = q;\n    vec2 param_1 = centralPoint;\n    vec2 param_2 = FoVScale;\n    vec3 dir_1 = FLT_flutter_local_calcCubeCoordsInGnomonicProjection(param, param_1, param_2);\n    vec3 param_3 = dir_1;\n    vec2 equirectCoord = FLT_flutter_local_sphericalToEquirectangular(param_3);\n    vec3 col = image.eval(image_size *  equirectCoord).xyz;\n    col *= (0.25 + (0.75 * pow((((16.0 * q.x) * q.y) * (1.0 - q.x)) * (1.0 - q.y), 0.1500000059604644775390625)));\n    fragColor = vec4(col, 1.0);\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
  "stage": 1,
  "target_platform": 2,
  "uniforms": [
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 0,
      "name": "resolution",
      "rows": 2,
      "type": 10
    },
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 1,
      "name": "mouse",
      "rows": 2,
      "type": 10
    },
    {
      "array_elements": 0,
      "bit_width": 0,
      "columns": 1,
      "location": 2,
      "name": "image",
      "rows": 1,
      "type": 12
    }
  ]
}